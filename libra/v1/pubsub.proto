syntax = "proto3";

package libra.v1;

option go_package = "github.com/ntons/libra-go/api/libra/v1";

import "google/protobuf/any.proto";

// 发布/订阅服务
service PubSubService {
    // 发布
    rpc Publish (PubSub.PublishRequest) returns (PubSub.PublishResponse);
    // 订阅
    rpc Subscribe (PubSub.SubscribeRequest) returns (stream PubSub.SubscribeResponse);
    // 消费，如果当时不可消费则阻塞等待直到超时或有可用信息
    rpc Consume (PubSub.ConsumeRequest) returns (PubSub.ConsumeResponse);
}

message PubSub {
    // 消息结构
    message Msg {
        // 生产者
        string producer = 1;
        // 产生时间
        int64 produce_at = 2;
        // 消息载荷
        oneof value {
            // 二进制载荷
            bytes bin = 7;
            // 字符串载荷
            string str = 8;
            // PB载荷
            google.protobuf.Any any = 9;
        }
        // 主题
        string topic = 10;
        // 消息ID
        // 在Subscribe/Consume回复中自动填充
        // Publish填充此字段无效
        string id = 11;
        // 消费者组
        // 在Consume回复中自动填充
        // Publish填充此字段无效
        int32 group_id = 12;
    }

    message Publication {
        // 主题
        string topic = 1;
        // 允许跨应用发送消息
        string app_id = 2;
        // 自动创建主题
        bool auto_create_topic = 7;
        // 消息最大保存数量
        int32 max_len = 8;
        // 消息最长保存时间(毫秒)
        int64 max_ttl = 9;
        // 主题下的消息
        repeated Msg msgs = 15;
    }
    message PublishRequest {
        repeated Publication publications = 1;
        int64 delay = 2; // 延迟发送(秒)
    }
    message PublishResponse {
    }

    message Subscription {
        // 主题
        string topic = 1;
        // 每次读取的最大数量(防止包体过大)
        int32 batch_size = 10;
        // 指定ID之后(不包含指定ID)
        string after_id = 11;
        // 指定毫秒时间戳开始
        int64 since_milli_timestamp = 12;
    }
    message SubscribeRequest {
        repeated Subscription subscriptions = 1;
    }
    message SubscribeResponse {
        repeated Msg msgs = 1;
    }

    message Consumption {
        // 主题
        string topic = 1;
        // 消费组
        int32 group_id = 2;
        // 消费处理响应超时时间(毫秒)
        int64 ack_timeout = 3;
    }
    message Ack {
        // 主题
        string topic = 1;
        // 消费组
        int32 group_id = 2;
        // 确认的消息ID
        repeated string msg_ids = 3;
    }
    message ConsumeRequest {
        // 消费
        repeated Consumption consumptions = 1;
        // 确认消息处理完成
        repeated Ack acks = 10;
    }
    message ConsumeResponse {
        repeated Msg msgs = 1;
    }
}
