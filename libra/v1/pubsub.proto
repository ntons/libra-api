syntax = "proto3";

package libra.v1;

option go_package = "github.com/ntons/libra-go/api/libra/v1";

import "google/protobuf/any.proto";

// 发布/订阅服务
service PubSubService {
    // 发布
    rpc Publish (PubSub.PublishRequest) returns (PubSub.PublishResponse);
    // 订阅
    rpc Subscribe (PubSub.SubscribeRequest) returns (stream PubSub.SubscribeResponse);
    // 消费，如果当时不可消费则阻塞等待直到超时或有可用信息
    rpc Consume (PubSub.ConsumeRequest) returns (PubSub.ConsumeResponse);
}

message PubSub {
    message Message {
        // 主题
        string topic = 1;
        // 消息ID，发送时候不需要填，收取的时候会自动填充
        string id = 2;
        // 生产者
        string producer = 3;
        // 生产时间
        int64 produce_at = 4;
        // 消息载荷
        oneof value {
            bytes bin = 11;
            string str = 12;
            google.protobuf.Any any = 13;
        }
    }

    message Options {
        bool create_topic = 1; // 自动创建主题
        int64 max_len = 2; // 主题保存的消息数量
        string min_id = 3; // 主题保存的最小ID
    }

    message PublishRequest {
        repeated Message msgs = 1;
        Options opts = 2;
    }
    message PublishResponse {
    }

    message Subscription {
        string topic = 1;
        // 每次读取的最大数量(防止包体过大)
        int32 batch_size = 10;
        // 指定ID之后(不包含指定ID)
        string after_id = 11;
        // 指定毫秒时间戳开始
        int64 since_milli_timestamp = 12;
    }
    message SubscribeRequest {
        repeated Subscription subscriptions = 1;
    }
    message SubscribeResponse {
        repeated Message msgs = 1;
    }

    message Consumption {
        // 主题
        string topic = 1;
        // 消费组
        int32 group_id = 2;
        // 消费处理响应超时时间
        int64 ack_timeout_milli = 3;
    }
    message Ack {
        // 主题
        string topic = 1;
        // 消费组
        int32 group_id = 2;
        // 确认的消息ID
        repeated string msg_ids = 3;
    }
    message ConsumeRequest {
        // 消费者标识
        //string consumer = 1;
        // 消费
        repeated Consumption consumptions = 6;
        // 确认消息处理完成
        repeated Ack acks = 10;
    }
    message ConsumeResponse {
        repeated Message msgs = 1;
    }
}
