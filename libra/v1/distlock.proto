syntax = "proto3";

package libra.v1;

option go_package = "github.com/ntons/libra-go/api/libra/v1";

import "google/protobuf/any.proto";

import "libra/v1/entry_key.proto";

// 分布式同步(锁)服务
service Distlock {
    rpc Lock(DistlockLockRequest) returns(DistlockLockResponse);
    rpc Unlock(DistlockUnlockRequest) returns(DistlockUnlockResponse);

    // 获取
    rpc Obtain(DistlockObtainRequest) returns(DistlockObtainResponse);
    // 续期
    rpc Refresh(DistlockRefreshRequest) returns(DistlockRefreshResponse);
    // 释放
    rpc Release(DistlockReleaseRequest) returns(DistlockReleaseResponse);
    // 保持，客户端必须在收到Notice时回应Request
    // 如果当前已经Obtain到了token，在Hold时候一并发送，否则Hold将尝试重新获取
    rpc Hold(stream DistlockHoldRequest) returns(stream DistlockHoldNotice);
}

message DistlockLockOptions {
    // 自动超时时间
    int32 timeout_milliseconds = 1;
}
message DistlockUnlockOptions {
    // 即使操作失败，依然释放锁
    bool even_on_failure = 1;
}

message DistlockLockRequest {
    EntryKey key = 1;
    // 如果需要锁，这个结构必须有，即使不需要改变options参数
    DistlockLockOptions lock_options = 11;
}
message DistlockLockResponse {
    // 获取到的互斥锁，你不需要知道这是个什么，在解锁时候传回来就行了
    google.protobuf.Any lock_token = 10;
}

message DistlockUnlockRequest {
    EntryKey key = 1;
    google.protobuf.Any lock_token = 10;
    DistlockUnlockOptions unlock_options = 11;
}
message DistlockUnlockResponse {
}

message DistlockObtainRequest {
    string key = 1;
    int32 timeout_milliseconds = 10;
}
message DistlockObtainResponse {
    string lock_token = 2;
}

message DistlockRefreshRequest {
    string key = 1;
    string lock_token = 2;
    int32 timeout_milliseconds = 10;
}
message DistlockRefreshResponse {
}

message DistlockReleaseRequest {
    string key = 1;
    string lock_token = 2;
}
message DistlockReleaseResponse {
}

message DistlockHoldRequest {
    string key = 1;
    string lock_token = 2;
}
message DistlockHoldNotice {
}

