syntax = "proto3";

package libra.v1;

option go_package = "github.com/ntons/libra-go/api/libra/v1";

import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";

import "libra/v1/entry_key.proto";
import "libra/v1/distlock.proto";

// 数据存储服务
// 这里的锁是个乐观锁，可以完全不用加锁任意访问数据
// 但是如果存在竞争条件(race condition)，使用者保证正确加锁
service Database {
    rpc RegisterSchema(DatabaseRegisterSchemaRequest) returns(DatabaseRegisterSchemaResponse) {}
    rpc Get(DatabaseGetRequest) returns(DatabaseGetResponse);
    rpc Set(DatabaseSetRequest) returns(DatabaseSetResponse);
}

message DatabaseRegisterSchemaRequest {
    // proto file descriptor set
    google.protobuf.FileDescriptorSet descriptor_set = 1;
    // proto message name
    string message_name = 2;
}
message DatabaseRegisterSchemaResponse {
    // unique identifier for registered proto
    string schema = 1;
}

message DatabaseGetRequest {
    EntryKey key = 1;
    google.protobuf.Any add_if_not_found = 9;
    // 如果设置lock_options会在获取数据之前尝试获取id对应的互斥锁
    // 如果上锁失败，数据将不会获取
    DistlockLockOptions lock_options = 11;
}
message DatabaseGetResponse {
    int64 revision = 8; // data revision
    google.protobuf.Any data = 9;
    google.protobuf.Any lock_token = 10;
}

message DatabaseSetRequest {
    EntryKey key = 1;
    google.protobuf.Any data = 9;
    // 获取到的互斥锁，更新数据前会校验锁是否有效，如果锁无效则不会更新数据。
    // 如果不设置，数据则会被强制更新。
    // 每次更新都会重置锁的TTL，即使更新失败。
    google.protobuf.Any lock_token = 10;
    // 设置unlock_options会在操作完成时解锁，要求lock_token有效
    DistlockUnlockOptions unlock_options = 11;
}
message DatabaseSetResponse {
    int64 revision = 8; // data revision after setting
}

