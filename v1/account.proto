syntax = "proto3";

package libra.v1;

option go_package = "github.com/ntons/libra-go/api/v1";

import "google/api/annotations.proto";
import "google/protobuf/any.proto";

// User代表一个用户
// id      为该用户的唯一标识，全局唯一
// acct_id 为该用户来源平台的账号ID，一个用户可以有多个acct_id，任意一个
//         acct_id匹配即确定该用户。所有用户的所有acct_id必须唯一。
//         多acct_id可能的用例有:
//         1. 游客账号和绑定之后的账号都可以作为acct_id来登录一个用户
//         2. 多第三方账号绑定，facebook/twitter/qq/wechat等
message User {
    string id = 1;
    repeated string acct_id  = 4;
    map<string, string> metadata = 15;
}

// Role代表User所创建的逻辑实例，Role和User为多对一关系
// id      为该角色的唯一标识，全局唯一
// index   为该角色在Role中的唯一序号，即(user_id, index)全局唯一
//         index主要为了防止异常情况下重试导致多次创建，
//         另外也可以作为分区分服的标识。
// user_id 该角色所属的用户
message Role {
    string id = 1;
    int32 index = 2;
    string user_id = 3;
    map<string, string> metadata = 15;
}

// Account提供供User和Role的管理，登录态的单点认证，分发和校验，
service Account {
    // Login verify the login state, return user and token as passport
    // a user will be created automatically if not exists
    rpc Login (AccountLoginRequest) returns (AccountLoginResponse) {
        option (google.api.http) = {
            post: "/v1/account/login"
            body: "*"
        };
    }

    // Bind another acct_id to user
    rpc Bind (AccountBindRequest) returns (AccountBindResponse) {
        option (google.api.http) = {
            post: "/v1/account/bind"
            body: "*"
        };
    }

    // List roles which belonging to the user
    rpc ListRoles (AccountListRolesRequest) returns (AccountListRolesResponse) {
        option (google.api.http) = {
            post: "/v1/account/list-role"
            body: "*"
            additional_bindings {
                get: "/v1/account/list-roles"
            }
        };
    }

    // Create role to the user
    rpc CreateRole (AccountCreateRoleRequest) returns (AccountCreateRoleResponse) {
        option (google.api.http) = {
            post: "/v1/account/create-role"
            body: "*"
        };
    }

    // Sign in the role, get a ticket as passport
    rpc SignIn (AccountSignInRequest) returns (AccountSignInResponse) {
        option (google.api.http) = {
            post: "/v1/account/sign-in"
            body: "*"
        };
    }

    // Set metadata of the user
    rpc SetUserMetadata (AccountSetUserMetadataRequest) returns (AccountSetUserMetadataResponse) {
        option (google.api.http) = {
            post: "/v1/account/set-user-metadata"
            body: "*"
        };
    }

    // Set metadata of a role
    rpc SetRoleMetadata (AccountSetRoleMetadataRequest) returns (AccountSetRoleMetadataResponse) {
        option (google.api.http) = {
            post: "/v1/account/set-role-metadata"
            body: "*"
        };
    }
}

message AccountLoginRequest {
    string app_id = 1;
    // The login state can be various depending to implementation
    google.protobuf.Any state = 2;
}
message AccountLoginResponse {
    // Token will be set to cookie "x-libra-token" as well.
    // A token field should be set to request if cookie is not supported.
    // If both cookie and request are set, cookie is preferred.
    string token = 1;
    User user = 2;
}

message AccountBindRequest {
    string app_id = 1;
    string token = 2;
    string acct_id = 3;
}
message AccountBindResponse {
}

message AccountListRolesRequest {
    string app_id = 1;
    string token = 2;
}
message AccountListRolesResponse {
    repeated Role roles = 1;
}

message AccountCreateRoleRequest {
    string app_id = 1;
    string token = 2;
    int32 index = 3; // role index to prevent duplicate creation
}
message AccountCreateRoleResponse {
    Role role = 1;
}

message AccountSignInRequest {
    string app_id = 1;
    string token = 2;
    string role_id = 3;
}
message AccountSignInResponse {
    string ticket = 1;
    Role role = 2;
}

message AccountSetUserMetadataRequest {
    string app_id = 1;
    string token = 2;
    map<string, string> metadata = 3;
}
message AccountSetUserMetadataResponse {
}

message AccountSetRoleMetadataRequest {
    string app_id = 1;
    string token = 2;
    string role_id = 3;
    map<string, string> metadata = 4;
}
message AccountSetRoleMetadataResponse {
}
