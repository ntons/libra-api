syntax = "proto3";

package libra.v1;

option go_package = "github.com/ntons/libra-go/api/v1";

import "google/protobuf/any.proto";

// 用户注册表服务，需要外部登录态
service User {
    rpc Login(UserLoginRequest) returns(UserLoginResponse);
    rpc Logout(UserLogoutRequest) returns(UserLogoutResponse);
    rpc Bind(UserBindRequest) returns(UserBindResponse);
    rpc SetMetadata(UserSetMetadataRequest) returns(UserSetMetadataResponse);
}

message UserData {
    string id = 1;
    repeated string accts  = 4;
    map<string, string> metadata = 15;
}

message UserLoginRequest {
    string app_id = 1;
    google.protobuf.Any state = 2; // depending on implementation
}
message UserLoginResponse {
    UserData user = 1;
}

message UserLogoutRequest {
}
message UserLogoutResponse {
}

message UserBindRequest {
    google.protobuf.Any state = 2; // the same as UserLoginRequest.state
}
message UserBindResponse {
}

message UserSetMetadataRequest {
    map<string, string> metadata = 1;
}
message UserSetMetadataResponse {
}

// login state for development, no security mechanism required
message DevLoginState {
    string username = 1;
}

// Librad not implement any account (check) system, the real account state
// should be verified via a third-party server, then send a login request
// to librad to fetch passport(token).
message UniformLoginState {
    // User which matchs one of the accts will be selected,
    // then all of the accts will be bind to this user.
    // All accts must be mapped to exact 0 or 1 user.
    // All accts will be bind to this user.
    repeated string accts = 1;

    // user ip
    string user_ip = 2;

    // timestamp when signature signed
    int64 timestamp = 13;

    // random string max length to 32 bytes
    // 16 bytes length at least is recommended
    string nonce = 14;

    // the signature should be signed at SERVER SIDE,
    // no matter the login request was sent from client or server.
    string signature = 15;
}

