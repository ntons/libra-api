syntax = "proto3";

package libra.v1;

option go_package = "github.com/ntons/libra-go/api/v1";

import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";

// 分布式同步(锁)服务
service Sync {
    rpc Lock(SyncLockRequest) returns(SyncLockResponse);
    rpc Unlock(SyncUnlockRequest) returns(SyncUnlockResponse);
}

// EntityKey 代表一个抽象实体的唯一标识
// 此标识在不同实例间必须唯一，即使是不同服务
// 比如，一个用户数据服务(Database)实例命名为{foo:roles:1}，
// 他的邮件服务(Mail)实例或者同步(Sync)实例不能用相同名称
message EntityKey {
    string app_id       = 1;
    string collection   = 2;
    string id           = 3;
}

message SyncLockOptions {
}
message SyncUnlockOptions {
    // 即使操作失败，依然释放锁
    bool even_on_failure = 1;
}

message SyncLockRequest {
    EntityKey key = 1;
    SyncLockOptions lock_options = 11;
}
message SyncLockResponse {
    // 获取到的互斥锁，你不需要知道这是个什么，在解锁时候传回来就行了
    google.protobuf.Any lock = 10;
}

message SyncUnlockRequest {
    google.protobuf.Any lock = 10;
    SyncUnlockOptions unlock_options = 11;
}
message SyncUnlockResponse {
}

